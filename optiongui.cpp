// -*- C++ -*- generated by wxGlade 0.6.3 on Tue Dec 25 13:08:40 2012

#include "ticker.hpp"
#include "wxticker.hpp"
#include "quote.hpp"
#include "optiongui.h"
#include "tinyxml2.h"

#include <oauth.h>
#include <string>
#include <fstream>
#include <sstream>
#include <map>
#include <boost/shared_ptr.hpp>
#define CONFIG_FILE "/home/joseph/workspace2/OptionSpreads/keys.txt"

const int QUOTE_CALLBACK = 100000;

using namespace std;
using namespace tinyxml2;

MyFrame1::MyFrame1(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
    // begin wxGlade: MyFrame1::MyFrame1
    frame_1_menubar = new wxMenuBar();
    wxMenu* wxglade_tmp_menu_1 = new wxMenu();
    wxglade_tmp_menu_1->Append(wxID_EXIT, wxT("Quit"), wxEmptyString, wxITEM_NORMAL);
    frame_1_menubar->Append(wxglade_tmp_menu_1, wxT("File"));
    SetMenuBar(frame_1_menubar);

    ifstream parameters;
    parameters.open("" CONFIG_FILE);

    //initialize oauth credentials as empty, try to read them in
    wxString cons_key=wxEmptyString;
    wxString cons_secret=wxEmptyString;
    wxString token_key=wxEmptyString;
    wxString token_secret=wxEmptyString;

    if (parameters.is_open())
		{
    	std::string line;
    	getline(parameters, line);
    	cons_key=wxString::FromAscii(line.c_str());
    	getline(parameters, line);
    	cons_secret=wxString::FromAscii(line.c_str());
    	getline(parameters, line);
    	token_key=wxString::FromAscii(line.c_str());
    	getline(parameters, line);
    	token_secret=wxString::FromAscii(line.c_str());


		}

    label_1 = new wxStaticText(this, wxID_ANY, wxT("Consumer Key"));
    txtctrlConsumerKey = new wxTextCtrl(this, wxID_ANY, cons_key);

    label_2 = new wxStaticText(this, wxID_ANY, wxT("Consumer Secret"));
    txtctrlConsumerSecret = new wxTextCtrl(this, wxID_ANY,cons_secret);

    label_3 = new wxStaticText(this, wxID_ANY, wxT("Token Key"));
    txtctrlTokenKey = new wxTextCtrl(this, wxID_ANY, token_key);

    label_4 = new wxStaticText(this, wxID_ANY, wxT("Token Secret"));
    txtctrlTokenSecret = new wxTextCtrl(this, wxID_ANY, token_secret);

    label_5 = new wxStaticText(this, wxID_ANY, wxT("URI"));
    txtctrlURI = new wxTextCtrl(this, wxID_ANY, wxT("MSTR,FB,GOOG"));
    wxButtonOK = new wxButton(this, BUTTON_GetQuote, wxT("Get Quote"));
    grid_1 = new wxGrid(this, wxID_ANY);

    Connect(wxID_EXIT, wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrame1::OnQuit));
    Connect(BUTTON_GetQuote,wxEVT_COMMAND_BUTTON_CLICKED , wxCommandEventHandler(MyFrame1::get_quote));
    Connect(QUOTE_CALLBACK, wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MyFrame1::onQuoteUpdate));



    set_properties();
    do_layout();
    // end wxGlade

	std::string URLBase = "https://api.tradeking.com/v1/market/ext/quotes.xml?symbols=";
	URLBase="https://stream.tradeking.com/v1/market/quotes.xml?symbols=";


	//get Consumer Key as ASCII const char*
	wxString ctrl_value=txtctrlConsumerKey->GetValue();
	std::string ConsumerKey;
	ConsumerKey = ctrl_value.mb_str();


	//get Consumer Secret as ASCII const char*
	ctrl_value=txtctrlConsumerSecret->GetValue();
	std::string ConsumerSecret;
	ConsumerSecret = ctrl_value.mb_str();

	//get Token Key as ASCII const char*
	ctrl_value=txtctrlTokenKey->GetValue();
	std::string TokenKey;
	TokenKey = ctrl_value.mb_str();

	//get Token Secret as ASCII const char*
	ctrl_value=txtctrlTokenSecret->GetValue();
	std::string TokenSecret;
	TokenSecret = ctrl_value.mb_str();

	//get URI as an ASCII const char*
	ctrl_value=txtctrlURI->GetValue();
	std::string symbol;
	symbol=ctrl_value.mb_str();



	//create quote object with oauth credentials & pass in symbol & URI

	//mytick.start(ConsumerKey, ConsumerSecret, TokenKey, TokenSecret, URLBase, symbol);

};

void MyFrame1::OnQuit(wxCommandEvent& WXUNUSED(event))
{
	Close(true);
	delete std_quote;
	delete mywxtick;
}

void MyFrame1::set_properties()
{
    // begin wxGlade: MyFrame1::set_properties
    SetTitle(wxT("Option Spreads"));
    grid_1->CreateGrid(10, 5);
    grid_1->SetColLabelValue(0, wxT("Strike"));
    grid_1->SetColLabelValue(1, wxT("Symbol"));
    grid_1->SetColLabelValue(2, wxT("Last"));
    grid_1->SetColLabelValue(3, wxT("Date time"));
    grid_1->SetColLabelValue(4, wxT("Open Interest"));
    // end wxGlade
}


void MyFrame1::do_layout()
{
    // begin wxGlade: MyFrame1::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* ConsKeySizer = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* ConsSecretSizer = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* TokenKeySizer = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* TokenSecretSizer = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* URISizer = new wxBoxSizer(wxHORIZONTAL);

    ConsKeySizer->Add(label_1, 0, wxRIGHT, 8);
    ConsKeySizer->Add(txtctrlConsumerKey, 1,0,10);

    ConsSecretSizer->Add(label_2, 0, wxRIGHT, 8);
    ConsSecretSizer->Add(txtctrlConsumerSecret, 1,0,10);

    TokenKeySizer->Add(label_3, 0, wxRIGHT, 8);
    TokenKeySizer->Add(txtctrlTokenKey, 1,0,10);

    TokenSecretSizer->Add(label_4, 0, wxRIGHT, 8);
    TokenSecretSizer->Add(txtctrlTokenSecret, 1,0,10);
    URISizer->Add(label_5,0,wxRIGHT,10);
    URISizer->Add(txtctrlURI,1,0,10);
    URISizer->Add(wxButtonOK,0,0,10);

    sizer_4->Add(ConsKeySizer, 1,wxEXPAND,0);
    sizer_4->Add(ConsSecretSizer, 1,wxEXPAND,0);
    sizer_4->Add(TokenKeySizer, 1,wxEXPAND,0);
    sizer_4->Add(TokenSecretSizer, 1,wxEXPAND,0);
    sizer_4->Add(URISizer,1,wxEXPAND,0);

//    sizer_1->Add(ConsSecretSizer, 1, wxEXPAND, 10);
    sizer_1->Add(sizer_4, 1, wxALL|wxEXPAND, 10);
    sizer_1->Add(grid_1, 1, wxALL|wxEXPAND, 0);
    SetSizer(sizer_1);
    sizer_1->Fit(this);
    Layout();
    // end wxGlade


}

void MyFrame1::get_quote(wxCommandEvent& WXUNUSED(event))
{


	std::string URLBase = "https://api.tradeking.com/v1/market/ext/quotes.xml?symbols=";
	URLBase="https://stream.tradeking.com/v1/market/quotes.xml?symbols=";


	//get Consumer Key as ASCII const char*
	wxString ctrl_value=txtctrlConsumerKey->GetValue();
	std::string ConsumerKey;
	ConsumerKey = ctrl_value.mb_str();


	//get Consumer Secret as ASCII const char*
	ctrl_value=txtctrlConsumerSecret->GetValue();
	std::string ConsumerSecret;
	ConsumerSecret = ctrl_value.mb_str();

	//get Token Key as ASCII const char*
	ctrl_value=txtctrlTokenKey->GetValue();
	std::string TokenKey;
	TokenKey = ctrl_value.mb_str();

	//get Token Secret as ASCII const char*
	ctrl_value=txtctrlTokenSecret->GetValue();
	std::string TokenSecret;
	TokenSecret = ctrl_value.mb_str();

	//get URI as an ASCII const char*
	ctrl_value=txtctrlURI->GetValue();

	std::string symbol_list;
	symbol_list=ctrl_value.mb_str();

	//create a quote object for each inputted symbol
	std::string symbol_temp=symbol_list;
	std::string symbol;
	size_t comma_position;
	std::map <string, quote> symbol_map;
	//comma_position=symbol_list.find(',',comma_position);

//for now just take first symbol from comma-delimited list and use that.
//	do	{
		comma_position=0;
		comma_position=symbol_temp.find(',',comma_position);
		if (comma_position!=string::npos){
			symbol=symbol_temp.substr(0,comma_position);
			symbol_temp=symbol_temp.substr(comma_position+1,string::npos);
		}
		else	{
			symbol=symbol_temp;

		}
		if (!symbol.empty())	{
			//boost::shared_ptr<quote> mysymbol(symbol);
//			quote mysymbol(symbol);
//			quote mysymbol(symbol);
//			symbol_map[symbol]=mysymbol;

		}

//	} while (comma_position!=string::npos);

//	std_quote = new quote(symbol);
//	mytick.init(std_quote);

	//for now, just send first symbol into start(), not symbol_list
	//mytick.start(ConsumerKey, ConsumerSecret, TokenKey, TokenSecret, URLBase, symbol);

//	mywxtick= new wxticker(this);

	wxquote = new quote(symbol);
//	mywxtick->init(wxquote);
//	mywxtick->start(ConsumerKey, ConsumerSecret, TokenKey, TokenSecret, URLBase, symbol);

	wxticker* tickthread = new wxticker(this);
	tickthread->init(wxquote); //pointer to quote object
	tickthread->start(ConsumerKey, ConsumerSecret, TokenKey, TokenSecret, URLBase, symbol);

	wxThreadError err = tickthread->Create();

    if (err != wxTHREAD_NO_ERROR)
    {
        wxMessageBox( _("Couldn't create thread!") );

    }

    err = tickthread->Run();

    if (err != wxTHREAD_NO_ERROR)
    {
        wxMessageBox( _("Couldn't run thread!") );

    }


}

void MyFrame1::onQuoteUpdate(wxCommandEvent& evt)	{

	XMLDocument xmlreply;
	int parse_success;

	parse_success=xmlreply.Parse(evt.GetString().mb_str(wxConvUTF8));

	XMLElement* xmlvalue;
	XMLHandle xml_handle(xmlreply);
	XMLElement* xml_eml;
	xml_eml = xml_handle.FirstChildElement().ToElement();
	std::string ElementName = xml_eml->Name();

	float last;
	float bid;
	float ask;
	std::string symbol;
	std::string timestamp;

	if (ElementName=="quote" )	{
		//std::cout << evt.GetString().mb_str(wxConvUTF8) << endl;
		xmlvalue= xml_handle.FirstChildElement("quote").FirstChildElement("symbol").ToElement();
		if (xmlvalue!=0)	{
			symbol=xmlvalue->GetText();
		}
		xmlvalue= xml_handle.FirstChildElement("quote").FirstChildElement("bid").ToElement();
		if (xmlvalue!=0)	{
			std::stringstream strValue;

			strValue << (xmlvalue->GetText());
			strValue >> bid;
		}

		xmlvalue= xml_handle.FirstChildElement("quote").FirstChildElement("ask").ToElement();
		if (xmlvalue!=0)	{
			std::stringstream strValue;

			strValue << (xmlvalue->GetText());
			strValue >> ask;
		}

		xmlvalue= xml_handle.FirstChildElement("quote").FirstChildElement("timestamp").ToElement();
		if (xmlvalue!=0)	{
			timestamp=xmlvalue->GetText();
		}

		//cout << "Time: " <<  timestamp << " Symbol: " << symbol << " Bid: " << bid << " Ask: " << ask << endl;
		grid_1->SetCellValue(0,1,wxString::FromAscii(symbol.c_str()));
		grid_1->SetCellValue(0,3,wxString::FromAscii(timestamp.c_str()));
		grid_1->SetCellValue(0,4,wxString::Format(wxT("%f"),ask));
	}



	if (ElementName=="trade")	{
			xmlvalue= xml_handle.FirstChildElement("trade").FirstChildElement("symbol").ToElement();
			if (xmlvalue!=0)	{
				symbol=xmlvalue->GetText();
			}
			xmlvalue= xml_handle.FirstChildElement("trade").FirstChildElement("last").ToElement();
			if (xmlvalue!=0)	{
				std::stringstream strValue;

				strValue << (xmlvalue->GetText());
				strValue >> last;
			}

			xmlvalue= xml_handle.FirstChildElement("trade").FirstChildElement("datetime").ToElement();
			if (xmlvalue!=0)	{
				timestamp=xmlvalue->GetText();
			}


		//cout << "Time: " <<  timestamp << " Symbol: "<< symbol << " Trade: " << last_tick << " Ask: " << ask << endl;
		grid_1->SetCellValue(0,1,wxString::FromAscii(symbol.c_str()));
		grid_1->SetCellValue(0,2,wxString::Format(wxT("%f"),last));
//		grid_1->SetCellValue(0,3,wxString::Format(wxT("%f"),bid));
//		grid_1->SetCellValue(0,4,wxString::Format(wxT("%f"),ask));
		grid_1->SetCellValue(0,3,wxString::FromAscii(timestamp.c_str()));
	}







}
